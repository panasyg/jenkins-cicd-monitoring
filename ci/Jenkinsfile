pipeline {
    agent any

    environment {
        GIT_BRANCH = 'main'
        IMAGE_NAME = "app"
        DEV_TAG = "dev"
        PROD_TAG = "latest"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}", url: 'https://github.com/panasyg/jenkins-cicd-monitoring.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('app') {

                        docker.build("${IMAGE_NAME}:${DEV_TAG}", '.')
                        
                        sh "docker tag ${IMAGE_NAME}:${DEV_TAG} ${IMAGE_NAME}:${PROD_TAG}"
                    }
                }
            }
        }

        stage('Run Test Container') {
            steps {
                script {
                    dir('app') {
                        sh "docker compose -f docker-compose.dev.yml up -d"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sleep 2

                    def response = sh(script: "curl --fail http://localhost:5001/health", returnStatus: true)

                    if (response != 0) {
                        echo "Test failed"
                        currentBuild.result = 'FAILURE'
                    } else {
                        echo "Test passed"
                        dir('app'){
                            sh "docker compose -f docker-compose.dev.yml down"
                            sh "docker rmi ${IMAGE_NAME}:${DEV_TAG}"
                        }
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    dir('app') {
                        sh "docker compose -f docker-compose.prod.yml up -d --no-deps app"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Stopping and cleaning up test container..."
                dir('app') {
                    sh "docker compose -f docker-compose.dev.yml down"
                }
                sh "docker ps -a"
            }
        }

        failure {
            script {
                echo "Test failed - removing test image..."
                sh 'docker images -q -f dangling=true | xargs --no-run-if-empty docker rmi'
            }
        }

        success {
            echo "Successful deployment"
        }
    }
}

